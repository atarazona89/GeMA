<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/mvc 
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/context 
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/data/jpa 
                        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx.xsd">
<!--    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd -->
<!--                        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd -->
<!--                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/context-3.2.xsd -->
<!--                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"> -->
    

    <!-- Modificación grande del jueves 1607 -->

    <!-- This produces a container-managed EntityManagerFactory; rather than 
        application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean -->
    <bean id="entityManagerFactoryBean"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />

        <!-- This makes /META-INF/persistence.xml is no longer necessary -->
        <property name="packagesToScan" value="com.karma.gema.model" />

        <!-- JpaVendorAdapter implementation for Hibernate EntityManager. Exposes 
            Hibernate's persistence provider and EntityManager extension interface -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>

        <property name="jpaProperties">
            <props>
                <!--prop key="hibernate.hbm2ddl.auto">validate</prop>
                <prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
            </props>
        </property>

    </bean>

    <!-- Simple implementation of the standard JDBC DataSource interface, configuring 
        the plain old JDBC DriverManager via bean properties -->
    <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/gema?nullNamePatternMatchesAll=true" />
        <property name="username" value="karma" />
        <property name="password" value="karma" />
    </bean>

    <!-- This transaction manager is appropriate for applications that use a 
        single JPA EntityManagerFactory for transactional data access. JTA (usually 
        through JtaTransactionManager) is necessary for accessing multiple transactional 
        resources within the same transaction. -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactoryBean" />
    </bean>

    <!-- Fin de la modificación -->

    <!-- Y ahora LiquiBase -->
    
    <bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
        <property name="dataSource" ref="dataSource"/>
        <property name="changeLog" value="classpath:database/db-changelog.xml" />

        <!-- contexts specifies the runtime contexts to use. -->
        <property name="contexts" value="test, production" />
    </bean>
    
    <!-- Fin de LiquiBase (por ahora) -->

    <!-- responsible for registering the necessary Spring components that power 
            annotation-driven transaction management; such as when @Transactional methods 
            are invoked -->
    <tx:annotation-driven />
    <mvc:annotation-driven />
    <context:annotation-config />
    <context:component-scan base-package="com.karma.gema" />
    <jpa:repositories base-package="com.karma.gema.repositories" entity-manager-factory-ref="entityManagerFactoryBean"/>


</beans>